# PE2.2-I
# Name: Profiling
# Background
# Learning objectives
# Outcomes
  *  get the base data for tuning the performance of parallel programs by profiling 
  *  detect performance issues and bottlenecks caused, for example, by inefficient programming, memory accesses, I/O operations, cache-misses, page-faults, and parallelization overheads 
  *  assess how different views of the profiling data (e.g. timeline graphs and communication matrices to illustrate the traffic between processes) can give insights in the runtime behavior of the program 
  *  use performance analysis tools like ScoreP, Scalasca 
