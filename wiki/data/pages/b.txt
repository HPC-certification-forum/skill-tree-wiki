====== Wiki ======

The primary purpose of this wiki is to enable comfortable editing of the skill definitions from the git repository and for the available certificates. One skill or certificate is exactly one page.

To navigate the skills effectively, use the Freeplane-based mindmap. Freeplane version 1.11 or higher is required.

===== Editing the skill tree =====

We welcome improvements to the skill definitions and suggestions for skill tree changes.
The skill tree has several representations, the Freeplane mindmap version forms the base with its navigational features and ability to link directly to the markdown files.
The markdown version is available in this [[https://www.hpc-certification.org/wiki/|wiki]].
Users may use it to modify the descriptions once registered. All skill tree changes and modifications should be executed by creating a GitHub pull request to either Markdown or XML representation.
Note that the chairs for the subtree may comment on or discuss the proposal.
The Skill Tree and the related Markdown file must have the same name and coordinates.

===== Skill variations =====

A skill is located in a unique place in the skill tree, which is the URI (Uniform Resource Identifier).
There may be multiple references to a skill in the tree which are hyperlinked within the structure of the skill tree or linked and mentioned in the markdown file in the wiki. 

On the skill tree, there are two types of entries: a: Leaf Skill and b: Node Skill.
Both are defined similarly but require care with the learning objectives. 

===== Leaf Skill definition =====

A (leaf) skill is a single unit of learning that can be taught in 1 to 4 hours, which includes self study time.
It is clearly defined by its requirements and the learning outcomes, which are learning objectives written using Blooms Taxonomy.
Each skill is clearly separated from other skills and closed so that can be taught and tested for without colliding with other skills.

A skill also needs to be universal, meaning it can be learned and applied to site, center, or computer independent.
For example, if a skill contain knowledge about principles these need to be phrased in a generalized manner or if a specific program is taught, this needs to be clearly stated in the name of the skill and the description.
One example can be parallel programming principles, which can be taught without knowledge of specific paradigms such as OpenMP or MPI.
These can be used as example during a course, but are not part of the skill.
Similarly, workload managers can be explained without stating a specific one, but a manager such as SLURM can be a skill on its own.
This is a great challenge and benefits from many contributors.
Only by this can this framework really be considered a standard.

===== Node Skill definition =====

A (node) skill is a collection of leaves and other node skills.
It contains all the learning outcomes from the skills immediately bellow it.
The many learning outcomes of a skill are combined into one or maximum two learning outcomes for the node skill.
This ensures that the content is accumulated up the tree.

For example, a node skill with 5 leaf skill attached should have minimum 5 to 6 learning outcomes and 10 maximum.
This also holds true of a node skill has a mix leaf skills and node skills.

The idea is that the learning objectives of a leaf skill are precise and get more and more incremental.
An example is a node skill called Cluster operating system (USE1) which has a leaf skill called Unix file system (USE1.1).
The leaf skill contains many learning objectives, which cover specific programs such as pwd, kill, sleep and more as well as learning objectives covering signalling via CTRL-C and others.
The node skill will have one learning objective covering handling of programs with arguments and how to manage signals to the program.



---

===== Skills section =====

**The following is the format:**

# Header (The name of the leaf along with its coordinates)

Example: Modules and Spack (USE2.5.2)

## Name

The name refers to a simplified name for the skill.
Names must be short and to the point.
Avoid names that are vague and unrelated.
Also, do not use entire sentences as names.
Do not use syntaxes as names, either, even if they are shorter than a descriptive name.
The same name must be used in the skill tree and in the markdown file. 

## Coordinates

Coordinates are a unique identifier from the root of the skill tree. The coordinates indicate the position of the skill on the skill tree and are unique for every skill. Skills with the same name on different parts of the tree may exist, and each will have its own unique Coordinate. The exact coordinates must be used in the skill tree and the subsequent markdown file. 

Breakdown of an ID example: USE2.5.2
USE2.5.2 -> [USE] = Main branch, [2.5.2] =  Branch co-ordinates. 
See image: 

## Description

The description for a leaf node can be short or long depending on the section, but it does not need to be comprehensive.

## Requirements

This section must have a list of requirements needed to learn the contents of a leaf. Requirements are split further into external and internal requirements. Any requirements present on the skill tree are internal. Any skill that needs to be learnt externally before learning the particular skill is an external requirement. A leaf node need not have either of these sections filled if there are no requirements to learn the skill. Local requirements must be hyperlinked within the Skill Tree and the Wiki.

## Learning Outcomes

Learning objectives, or learning outcomes as called here, are essentially a list of everything the user needs to learn to acquire a certification for the particular leaf node. It is a comprehensive list of everything they need to know. The learning objectives also form the base of the testing phase of HPC CF, where candidates will be tested online for their knowledge of the topics covered under the learning objectives.

## Subskills

This section is only present for node skills and contains a linked list with all the skills immediately under it.


## Get tested

This section appears when an online test for a particular leaf is available. It links the user directly to an online test. 


**Sections which are blank need not be represented in the Markdown. However, some sections like Header, Description and Learning Objectives are compulsory in the leaf nodes markdown file.**

---

===== Example entry of a skill =====

# USE1.1 Command Line Interface

HPC systems are usually accessed via a Linux-based Command Line Interface (CLI) that is provided by a shell.

At its core, a shell is simply a convenient tool that you can use to execute commands on a Linux computer.
The shell provides a textual interface allowing to interact with the operating system and performing all possible operations, i.e., accessing and manipulating files, and running programs.   However, there are various misconceptions that new users typically face when handling a shell such as the Bash.
Particularly, dealing with control characters and the format expected when executing programs with arguments can be error-prone.

Part of this skill is the general principles of the interaction with a shell, to execute and to stop programs.

## Requirements


## Learning Outcomes

  * Utilize the bash shell to execute individual programs with arguments.
  * Describe the meaning of the exit code of a program.
  * Run multiple programs after another depending on the exit code ;, &&, ||.
  * List the set of basic programs and their tasks:
    * pwd
    * whoami
    * sleep
    * kill
    * echo
    * clear
    * man 
    * vi, vim, emacs, nano
    * exit
  * Utilize the available help of a program (--help argument and the man pages).
  * Interrupt or abort a program execution:
    * CTRL-C
    * CTRL-Z
    * using kill -9
  * Use the shell history to search and execute previously executed commands.
  * Set and print shell variables.
  * Print all currently set variables
  * Identify potential special characters that must be handled with care.
    * List strings that could refer to files/directories
  * Utilize escaping to ensure correct handling of arguments.
  * Understand wildcard characters to select a group of files/directories:
    * * 
    * ? 
    * [-,]
  * How to close popular command line text editors with/or without saving changes:
    * nano
    * vi
    * emacs


